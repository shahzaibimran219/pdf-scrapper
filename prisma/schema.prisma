// Prisma schema for User, Resume, ResumeHistory

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?  
  email         String?  @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  resumes       Resume[]
  resumeHistory ResumeHistory[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken")
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id               String   @id @default(uuid())
  userId           String
  fileName         String
  fileSize         Int
  storagePath      String?
  uploadedAt       DateTime @default(now())
  sourceHash       String   @db.VarChar(64)
  detectedPages    Json?
  lastProcessStatus ResumeStatus @default(PENDING)
  schemaVersion    String
  resumeData       Json?
  lastError        String?

  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  history ResumeHistory[]

  @@index([userId, uploadedAt])
  @@index([sourceHash])
}

model ResumeHistory {
  id            String   @id @default(uuid())
  resumeId      String
  userId        String
  extractedAt   DateTime @default(now())
  schemaVersion String
  snapshot      Json
  notes         String?

  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ResumeStatus {
  PENDING
  SUCCEEDED
  FAILED
}


